/*
 * Authentication module for AngularJS
 * Copyright (C) 2013 Michael Diolosa <michael.diolosa@gmail.com>
 * License: MIT
 */

/*global angular:true, browser: true */

/*
 * TODO for V2:
 * - Add support for user roles within the principal
 */

(function () {
  'use strict';

  // # angular-authentication

  // Private variables for storing identity information.
  var _identity = {},

    // Stores whether the user has been authenticated
    _authenticated = false,

    // ## authentication

    // Provides the interface for conversing with the authentication API and
    // generating a principal from the authenticated entity's information.
    mod = angular.module('authentication',
      ['http-auth-interceptor'])

      .value('version', '1.0.0')

      // The authenticated entity, it's identity object is dynamically
      // generated when authentication is successful. It's properties are
      // generated by looping through the data that was returned by the
      // authentication API using the white list of property values that can
      // be configured through `authorityService.apiIdentityKeys`.
      .factory('principal', function () {
        return {
          identity: function () { return _identity; },
          isAuthenticated: function () { return _authenticated; }
        };
      })

      // The `authority` service provides a means of authenticating a user by
      // communicating with an authentication web service.
      .provider('authority', function () {
        // An object that describes how the keys from the result set are to be
        // translated into the identity object. The key of this object is the
        // key that is returned from the `authorize` method's data; the value of
        // this key is the key that it will exist as on the object that's
        // returned from `principal.identity()`.
        //
        // An easier way to explain this is through some code:
        //
        // We will assume that the authentication API returns a JSON object on
        // success that contains the following value:
        //
        //     {
        //       "username": "mbrio",
        //       "id:": 1001
        //       "date": 1363784671793
        //     }
        //
        // With the default values set to apiIdentityKeys then the object
        // returned from `principal.identity()` would be structured as:
        //
        //     {
        //       name: function () { return "mbrio"; },
        //       id: function () { return 1001; }
        //     }
        //
        // Which then could be used in angular template if set to
        // `$scope.user = principal` as:
        //
        //     user.identity().name
        //
        // As you see the `username` property on the JSON data was interpolated
        // to just `name`, `id` stayed the same, and `date` was ignored.
        this.apiIdentityKeys = {
          username: 'name',
          id: 'id'
        };

        this.$get = ['$rootScope', 'authService',
          function ($rootScope, authService) {
            var idKeys = this.apiIdentityKeys;

            return {
              // `authorize` communicates with the authentication api, on
              // success it informs the `authService` of that the user has been
              // logged in and then broadcasts the `authority-authorized` event.
              // If the credentials were incorrect then the event
              // `authority-authorization-failed` is broadcast instead.
              authorize: function (data) {
                var key, propertyFn;
                _authenticated = true;

                // Use a method to apply values to ensure the correct
                // information is returned
                propertyFn = function (k) {
                  var value = idKeys[k],
                    retval = data[k],
                    ident = {};

                  _identity[value] = function () { return retval; };
                };

                for (key in idKeys) {
                  if (idKeys.hasOwnProperty(key) && data.hasOwnProperty(key)) {
                    propertyFn(key);
                  }
                }

                // `authService` we have lift off...
                authService.loginConfirmed();
                $rootScope.$broadcast('event:authority-authorized');
              },

              // `deauthorize` signs off the principal
              deauthorize: function () {
                var key, value;
                _authenticated = false;

                // Delete all the properties of `_identity` to create a
                // clean slate.
                for (key in idKeys) {
                  if (idKeys.hasOwnProperty(key) && _identity.hasOwnProperty(value)) {
                    delete _identity[value];
                  }
                }

                $rootScope.$broadcast('event:authority-deauthorized');
              }
            };
          }];
      });
}());